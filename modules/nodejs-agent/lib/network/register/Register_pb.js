/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_common_pb = require('../common/common_pb.js');
goog.object.extend(proto, common_common_pb);
goog.exportSymbol('proto.Endpoint', null, global);
goog.exportSymbol('proto.EndpointMapping', null, global);
goog.exportSymbol('proto.EndpointMappingElement', null, global);
goog.exportSymbol('proto.Enpoints', null, global);
goog.exportSymbol('proto.NetAddressMapping', null, global);
goog.exportSymbol('proto.NetAddresses', null, global);
goog.exportSymbol('proto.Service', null, global);
goog.exportSymbol('proto.ServiceAndNetworkAddressMapping', null, global);
goog.exportSymbol('proto.ServiceAndNetworkAddressMappings', null, global);
goog.exportSymbol('proto.ServiceInstance', null, global);
goog.exportSymbol('proto.ServiceInstanceRegisterMapping', null, global);
goog.exportSymbol('proto.ServiceInstances', null, global);
goog.exportSymbol('proto.ServiceRegisterMapping', null, global);
goog.exportSymbol('proto.Services', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Services = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Services.repeatedFields_, null);
};
goog.inherits(proto.Services, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Services.displayName = 'proto.Services';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Services.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Services.prototype.toObject = function(opt_includeInstance) {
  return proto.Services.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Services} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Services.toObject = function(includeInstance, msg) {
  var f, obj = {
    servicesList: jspb.Message.toObjectList(msg.getServicesList(),
    proto.Service.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Services}
 */
proto.Services.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Services;
  return proto.Services.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Services} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Services}
 */
proto.Services.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Service;
      reader.readMessage(value,proto.Service.deserializeBinaryFromReader);
      msg.addServices(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Services.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Services.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Services} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Services.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Service.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Service services = 1;
 * @return {!Array<!proto.Service>}
 */
proto.Services.prototype.getServicesList = function() {
  return /** @type{!Array<!proto.Service>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Service, 1));
};


/** @param {!Array<!proto.Service>} value */
proto.Services.prototype.setServicesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Service=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Service}
 */
proto.Services.prototype.addServices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Service, opt_index);
};


proto.Services.prototype.clearServicesList = function() {
  this.setServicesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Service = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Service.repeatedFields_, null);
};
goog.inherits(proto.Service, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Service.displayName = 'proto.Service';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Service.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Service.prototype.toObject = function(opt_includeInstance) {
  return proto.Service.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Service} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Service.toObject = function(includeInstance, msg) {
  var f, obj = {
    servicename: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tagsList: jspb.Message.toObjectList(msg.getTagsList(),
    common_common_pb.KeyStringValuePair.toObject, includeInstance),
    propertiesList: jspb.Message.toObjectList(msg.getPropertiesList(),
    common_common_pb.KeyStringValuePair.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Service}
 */
proto.Service.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Service;
  return proto.Service.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Service} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Service}
 */
proto.Service.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setServicename(value);
      break;
    case 3:
      var value = new common_common_pb.KeyStringValuePair;
      reader.readMessage(value,common_common_pb.KeyStringValuePair.deserializeBinaryFromReader);
      msg.addTags(value);
      break;
    case 4:
      var value = new common_common_pb.KeyStringValuePair;
      reader.readMessage(value,common_common_pb.KeyStringValuePair.deserializeBinaryFromReader);
      msg.addProperties(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Service.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Service.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Service} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Service.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServicename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      common_common_pb.KeyStringValuePair.serializeBinaryToWriter
    );
  }
  f = message.getPropertiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      common_common_pb.KeyStringValuePair.serializeBinaryToWriter
    );
  }
};


/**
 * optional string serviceName = 1;
 * @return {string}
 */
proto.Service.prototype.getServicename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Service.prototype.setServicename = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated KeyStringValuePair tags = 3;
 * @return {!Array<!proto.KeyStringValuePair>}
 */
proto.Service.prototype.getTagsList = function() {
  return /** @type{!Array<!proto.KeyStringValuePair>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_common_pb.KeyStringValuePair, 3));
};


/** @param {!Array<!proto.KeyStringValuePair>} value */
proto.Service.prototype.setTagsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.KeyStringValuePair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.KeyStringValuePair}
 */
proto.Service.prototype.addTags = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.KeyStringValuePair, opt_index);
};


proto.Service.prototype.clearTagsList = function() {
  this.setTagsList([]);
};


/**
 * repeated KeyStringValuePair properties = 4;
 * @return {!Array<!proto.KeyStringValuePair>}
 */
proto.Service.prototype.getPropertiesList = function() {
  return /** @type{!Array<!proto.KeyStringValuePair>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_common_pb.KeyStringValuePair, 4));
};


/** @param {!Array<!proto.KeyStringValuePair>} value */
proto.Service.prototype.setPropertiesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.KeyStringValuePair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.KeyStringValuePair}
 */
proto.Service.prototype.addProperties = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.KeyStringValuePair, opt_index);
};


proto.Service.prototype.clearPropertiesList = function() {
  this.setPropertiesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ServiceRegisterMapping = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ServiceRegisterMapping.repeatedFields_, null);
};
goog.inherits(proto.ServiceRegisterMapping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ServiceRegisterMapping.displayName = 'proto.ServiceRegisterMapping';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ServiceRegisterMapping.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ServiceRegisterMapping.prototype.toObject = function(opt_includeInstance) {
  return proto.ServiceRegisterMapping.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ServiceRegisterMapping} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServiceRegisterMapping.toObject = function(includeInstance, msg) {
  var f, obj = {
    servicesList: jspb.Message.toObjectList(msg.getServicesList(),
    common_common_pb.KeyIntValuePair.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ServiceRegisterMapping}
 */
proto.ServiceRegisterMapping.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ServiceRegisterMapping;
  return proto.ServiceRegisterMapping.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ServiceRegisterMapping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ServiceRegisterMapping}
 */
proto.ServiceRegisterMapping.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_common_pb.KeyIntValuePair;
      reader.readMessage(value,common_common_pb.KeyIntValuePair.deserializeBinaryFromReader);
      msg.addServices(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ServiceRegisterMapping.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ServiceRegisterMapping.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ServiceRegisterMapping} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServiceRegisterMapping.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      common_common_pb.KeyIntValuePair.serializeBinaryToWriter
    );
  }
};


/**
 * repeated KeyIntValuePair services = 1;
 * @return {!Array<!proto.KeyIntValuePair>}
 */
proto.ServiceRegisterMapping.prototype.getServicesList = function() {
  return /** @type{!Array<!proto.KeyIntValuePair>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_common_pb.KeyIntValuePair, 1));
};


/** @param {!Array<!proto.KeyIntValuePair>} value */
proto.ServiceRegisterMapping.prototype.setServicesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.KeyIntValuePair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.KeyIntValuePair}
 */
proto.ServiceRegisterMapping.prototype.addServices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.KeyIntValuePair, opt_index);
};


proto.ServiceRegisterMapping.prototype.clearServicesList = function() {
  this.setServicesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ServiceInstances = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ServiceInstances.repeatedFields_, null);
};
goog.inherits(proto.ServiceInstances, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ServiceInstances.displayName = 'proto.ServiceInstances';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ServiceInstances.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ServiceInstances.prototype.toObject = function(opt_includeInstance) {
  return proto.ServiceInstances.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ServiceInstances} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServiceInstances.toObject = function(includeInstance, msg) {
  var f, obj = {
    instancesList: jspb.Message.toObjectList(msg.getInstancesList(),
    proto.ServiceInstance.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ServiceInstances}
 */
proto.ServiceInstances.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ServiceInstances;
  return proto.ServiceInstances.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ServiceInstances} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ServiceInstances}
 */
proto.ServiceInstances.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ServiceInstance;
      reader.readMessage(value,proto.ServiceInstance.deserializeBinaryFromReader);
      msg.addInstances(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ServiceInstances.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ServiceInstances.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ServiceInstances} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServiceInstances.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstancesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ServiceInstance.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ServiceInstance instances = 1;
 * @return {!Array<!proto.ServiceInstance>}
 */
proto.ServiceInstances.prototype.getInstancesList = function() {
  return /** @type{!Array<!proto.ServiceInstance>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ServiceInstance, 1));
};


/** @param {!Array<!proto.ServiceInstance>} value */
proto.ServiceInstances.prototype.setInstancesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ServiceInstance=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ServiceInstance}
 */
proto.ServiceInstances.prototype.addInstances = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ServiceInstance, opt_index);
};


proto.ServiceInstances.prototype.clearInstancesList = function() {
  this.setInstancesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ServiceInstance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ServiceInstance.repeatedFields_, null);
};
goog.inherits(proto.ServiceInstance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ServiceInstance.displayName = 'proto.ServiceInstance';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ServiceInstance.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ServiceInstance.prototype.toObject = function(opt_includeInstance) {
  return proto.ServiceInstance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ServiceInstance} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServiceInstance.toObject = function(includeInstance, msg) {
  var f, obj = {
    serviceid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    instanceuuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    time: jspb.Message.getFieldWithDefault(msg, 3, 0),
    tagsList: jspb.Message.toObjectList(msg.getTagsList(),
    common_common_pb.KeyStringValuePair.toObject, includeInstance),
    propertiesList: jspb.Message.toObjectList(msg.getPropertiesList(),
    common_common_pb.KeyStringValuePair.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ServiceInstance}
 */
proto.ServiceInstance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ServiceInstance;
  return proto.ServiceInstance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ServiceInstance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ServiceInstance}
 */
proto.ServiceInstance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setServiceid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInstanceuuid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTime(value);
      break;
    case 4:
      var value = new common_common_pb.KeyStringValuePair;
      reader.readMessage(value,common_common_pb.KeyStringValuePair.deserializeBinaryFromReader);
      msg.addTags(value);
      break;
    case 5:
      var value = new common_common_pb.KeyStringValuePair;
      reader.readMessage(value,common_common_pb.KeyStringValuePair.deserializeBinaryFromReader);
      msg.addProperties(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ServiceInstance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ServiceInstance.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ServiceInstance} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServiceInstance.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServiceid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getInstanceuuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      common_common_pb.KeyStringValuePair.serializeBinaryToWriter
    );
  }
  f = message.getPropertiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      common_common_pb.KeyStringValuePair.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 serviceId = 1;
 * @return {number}
 */
proto.ServiceInstance.prototype.getServiceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ServiceInstance.prototype.setServiceid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string instanceUUID = 2;
 * @return {string}
 */
proto.ServiceInstance.prototype.getInstanceuuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ServiceInstance.prototype.setInstanceuuid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 time = 3;
 * @return {number}
 */
proto.ServiceInstance.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ServiceInstance.prototype.setTime = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated KeyStringValuePair tags = 4;
 * @return {!Array<!proto.KeyStringValuePair>}
 */
proto.ServiceInstance.prototype.getTagsList = function() {
  return /** @type{!Array<!proto.KeyStringValuePair>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_common_pb.KeyStringValuePair, 4));
};


/** @param {!Array<!proto.KeyStringValuePair>} value */
proto.ServiceInstance.prototype.setTagsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.KeyStringValuePair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.KeyStringValuePair}
 */
proto.ServiceInstance.prototype.addTags = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.KeyStringValuePair, opt_index);
};


proto.ServiceInstance.prototype.clearTagsList = function() {
  this.setTagsList([]);
};


/**
 * repeated KeyStringValuePair properties = 5;
 * @return {!Array<!proto.KeyStringValuePair>}
 */
proto.ServiceInstance.prototype.getPropertiesList = function() {
  return /** @type{!Array<!proto.KeyStringValuePair>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_common_pb.KeyStringValuePair, 5));
};


/** @param {!Array<!proto.KeyStringValuePair>} value */
proto.ServiceInstance.prototype.setPropertiesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.KeyStringValuePair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.KeyStringValuePair}
 */
proto.ServiceInstance.prototype.addProperties = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.KeyStringValuePair, opt_index);
};


proto.ServiceInstance.prototype.clearPropertiesList = function() {
  this.setPropertiesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ServiceInstanceRegisterMapping = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ServiceInstanceRegisterMapping.repeatedFields_, null);
};
goog.inherits(proto.ServiceInstanceRegisterMapping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ServiceInstanceRegisterMapping.displayName = 'proto.ServiceInstanceRegisterMapping';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ServiceInstanceRegisterMapping.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ServiceInstanceRegisterMapping.prototype.toObject = function(opt_includeInstance) {
  return proto.ServiceInstanceRegisterMapping.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ServiceInstanceRegisterMapping} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServiceInstanceRegisterMapping.toObject = function(includeInstance, msg) {
  var f, obj = {
    serviceinstancesList: jspb.Message.toObjectList(msg.getServiceinstancesList(),
    common_common_pb.KeyIntValuePair.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ServiceInstanceRegisterMapping}
 */
proto.ServiceInstanceRegisterMapping.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ServiceInstanceRegisterMapping;
  return proto.ServiceInstanceRegisterMapping.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ServiceInstanceRegisterMapping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ServiceInstanceRegisterMapping}
 */
proto.ServiceInstanceRegisterMapping.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_common_pb.KeyIntValuePair;
      reader.readMessage(value,common_common_pb.KeyIntValuePair.deserializeBinaryFromReader);
      msg.addServiceinstances(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ServiceInstanceRegisterMapping.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ServiceInstanceRegisterMapping.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ServiceInstanceRegisterMapping} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServiceInstanceRegisterMapping.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServiceinstancesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      common_common_pb.KeyIntValuePair.serializeBinaryToWriter
    );
  }
};


/**
 * repeated KeyIntValuePair serviceInstances = 1;
 * @return {!Array<!proto.KeyIntValuePair>}
 */
proto.ServiceInstanceRegisterMapping.prototype.getServiceinstancesList = function() {
  return /** @type{!Array<!proto.KeyIntValuePair>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_common_pb.KeyIntValuePair, 1));
};


/** @param {!Array<!proto.KeyIntValuePair>} value */
proto.ServiceInstanceRegisterMapping.prototype.setServiceinstancesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.KeyIntValuePair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.KeyIntValuePair}
 */
proto.ServiceInstanceRegisterMapping.prototype.addServiceinstances = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.KeyIntValuePair, opt_index);
};


proto.ServiceInstanceRegisterMapping.prototype.clearServiceinstancesList = function() {
  this.setServiceinstancesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetAddresses = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.NetAddresses.repeatedFields_, null);
};
goog.inherits(proto.NetAddresses, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NetAddresses.displayName = 'proto.NetAddresses';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.NetAddresses.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetAddresses.prototype.toObject = function(opt_includeInstance) {
  return proto.NetAddresses.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetAddresses} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetAddresses.toObject = function(includeInstance, msg) {
  var f, obj = {
    addressesList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetAddresses}
 */
proto.NetAddresses.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetAddresses;
  return proto.NetAddresses.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetAddresses} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetAddresses}
 */
proto.NetAddresses.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addAddresses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetAddresses.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetAddresses.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetAddresses} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetAddresses.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddressesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string addresses = 1;
 * @return {!Array<string>}
 */
proto.NetAddresses.prototype.getAddressesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.NetAddresses.prototype.setAddressesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.NetAddresses.prototype.addAddresses = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.NetAddresses.prototype.clearAddressesList = function() {
  this.setAddressesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetAddressMapping = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.NetAddressMapping.repeatedFields_, null);
};
goog.inherits(proto.NetAddressMapping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NetAddressMapping.displayName = 'proto.NetAddressMapping';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.NetAddressMapping.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetAddressMapping.prototype.toObject = function(opt_includeInstance) {
  return proto.NetAddressMapping.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetAddressMapping} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetAddressMapping.toObject = function(includeInstance, msg) {
  var f, obj = {
    addressidsList: jspb.Message.toObjectList(msg.getAddressidsList(),
    common_common_pb.KeyIntValuePair.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetAddressMapping}
 */
proto.NetAddressMapping.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetAddressMapping;
  return proto.NetAddressMapping.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetAddressMapping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetAddressMapping}
 */
proto.NetAddressMapping.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_common_pb.KeyIntValuePair;
      reader.readMessage(value,common_common_pb.KeyIntValuePair.deserializeBinaryFromReader);
      msg.addAddressids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetAddressMapping.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetAddressMapping.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetAddressMapping} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetAddressMapping.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddressidsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      common_common_pb.KeyIntValuePair.serializeBinaryToWriter
    );
  }
};


/**
 * repeated KeyIntValuePair addressIds = 1;
 * @return {!Array<!proto.KeyIntValuePair>}
 */
proto.NetAddressMapping.prototype.getAddressidsList = function() {
  return /** @type{!Array<!proto.KeyIntValuePair>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_common_pb.KeyIntValuePair, 1));
};


/** @param {!Array<!proto.KeyIntValuePair>} value */
proto.NetAddressMapping.prototype.setAddressidsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.KeyIntValuePair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.KeyIntValuePair}
 */
proto.NetAddressMapping.prototype.addAddressids = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.KeyIntValuePair, opt_index);
};


proto.NetAddressMapping.prototype.clearAddressidsList = function() {
  this.setAddressidsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Enpoints = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Enpoints.repeatedFields_, null);
};
goog.inherits(proto.Enpoints, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Enpoints.displayName = 'proto.Enpoints';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Enpoints.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Enpoints.prototype.toObject = function(opt_includeInstance) {
  return proto.Enpoints.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Enpoints} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Enpoints.toObject = function(includeInstance, msg) {
  var f, obj = {
    endpointsList: jspb.Message.toObjectList(msg.getEndpointsList(),
    proto.Endpoint.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Enpoints}
 */
proto.Enpoints.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Enpoints;
  return proto.Enpoints.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Enpoints} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Enpoints}
 */
proto.Enpoints.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Endpoint;
      reader.readMessage(value,proto.Endpoint.deserializeBinaryFromReader);
      msg.addEndpoints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Enpoints.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Enpoints.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Enpoints} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Enpoints.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEndpointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Endpoint.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Endpoint endpoints = 1;
 * @return {!Array<!proto.Endpoint>}
 */
proto.Enpoints.prototype.getEndpointsList = function() {
  return /** @type{!Array<!proto.Endpoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Endpoint, 1));
};


/** @param {!Array<!proto.Endpoint>} value */
proto.Enpoints.prototype.setEndpointsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Endpoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Endpoint}
 */
proto.Enpoints.prototype.addEndpoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Endpoint, opt_index);
};


proto.Enpoints.prototype.clearEndpointsList = function() {
  this.setEndpointsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Endpoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Endpoint.repeatedFields_, null);
};
goog.inherits(proto.Endpoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Endpoint.displayName = 'proto.Endpoint';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Endpoint.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Endpoint.prototype.toObject = function(opt_includeInstance) {
  return proto.Endpoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Endpoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Endpoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    serviceid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    endpointname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    tagsList: jspb.Message.toObjectList(msg.getTagsList(),
    common_common_pb.KeyStringValuePair.toObject, includeInstance),
    propertiesList: jspb.Message.toObjectList(msg.getPropertiesList(),
    common_common_pb.KeyStringValuePair.toObject, includeInstance),
    from: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Endpoint}
 */
proto.Endpoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Endpoint;
  return proto.Endpoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Endpoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Endpoint}
 */
proto.Endpoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setServiceid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndpointname(value);
      break;
    case 3:
      var value = new common_common_pb.KeyStringValuePair;
      reader.readMessage(value,common_common_pb.KeyStringValuePair.deserializeBinaryFromReader);
      msg.addTags(value);
      break;
    case 4:
      var value = new common_common_pb.KeyStringValuePair;
      reader.readMessage(value,common_common_pb.KeyStringValuePair.deserializeBinaryFromReader);
      msg.addProperties(value);
      break;
    case 5:
      var value = /** @type {!proto.DetectPoint} */ (reader.readEnum());
      msg.setFrom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Endpoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Endpoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Endpoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Endpoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServiceid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getEndpointname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      common_common_pb.KeyStringValuePair.serializeBinaryToWriter
    );
  }
  f = message.getPropertiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      common_common_pb.KeyStringValuePair.serializeBinaryToWriter
    );
  }
  f = message.getFrom();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional int32 serviceId = 1;
 * @return {number}
 */
proto.Endpoint.prototype.getServiceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Endpoint.prototype.setServiceid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string endpointName = 2;
 * @return {string}
 */
proto.Endpoint.prototype.getEndpointname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Endpoint.prototype.setEndpointname = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated KeyStringValuePair tags = 3;
 * @return {!Array<!proto.KeyStringValuePair>}
 */
proto.Endpoint.prototype.getTagsList = function() {
  return /** @type{!Array<!proto.KeyStringValuePair>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_common_pb.KeyStringValuePair, 3));
};


/** @param {!Array<!proto.KeyStringValuePair>} value */
proto.Endpoint.prototype.setTagsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.KeyStringValuePair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.KeyStringValuePair}
 */
proto.Endpoint.prototype.addTags = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.KeyStringValuePair, opt_index);
};


proto.Endpoint.prototype.clearTagsList = function() {
  this.setTagsList([]);
};


/**
 * repeated KeyStringValuePair properties = 4;
 * @return {!Array<!proto.KeyStringValuePair>}
 */
proto.Endpoint.prototype.getPropertiesList = function() {
  return /** @type{!Array<!proto.KeyStringValuePair>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_common_pb.KeyStringValuePair, 4));
};


/** @param {!Array<!proto.KeyStringValuePair>} value */
proto.Endpoint.prototype.setPropertiesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.KeyStringValuePair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.KeyStringValuePair}
 */
proto.Endpoint.prototype.addProperties = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.KeyStringValuePair, opt_index);
};


proto.Endpoint.prototype.clearPropertiesList = function() {
  this.setPropertiesList([]);
};


/**
 * optional DetectPoint from = 5;
 * @return {!proto.DetectPoint}
 */
proto.Endpoint.prototype.getFrom = function() {
  return /** @type {!proto.DetectPoint} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.DetectPoint} value */
proto.Endpoint.prototype.setFrom = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EndpointMapping = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.EndpointMapping.repeatedFields_, null);
};
goog.inherits(proto.EndpointMapping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EndpointMapping.displayName = 'proto.EndpointMapping';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.EndpointMapping.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EndpointMapping.prototype.toObject = function(opt_includeInstance) {
  return proto.EndpointMapping.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EndpointMapping} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EndpointMapping.toObject = function(includeInstance, msg) {
  var f, obj = {
    elementsList: jspb.Message.toObjectList(msg.getElementsList(),
    proto.EndpointMappingElement.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EndpointMapping}
 */
proto.EndpointMapping.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EndpointMapping;
  return proto.EndpointMapping.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EndpointMapping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EndpointMapping}
 */
proto.EndpointMapping.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.EndpointMappingElement;
      reader.readMessage(value,proto.EndpointMappingElement.deserializeBinaryFromReader);
      msg.addElements(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EndpointMapping.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EndpointMapping.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EndpointMapping} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EndpointMapping.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getElementsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.EndpointMappingElement.serializeBinaryToWriter
    );
  }
};


/**
 * repeated EndpointMappingElement elements = 1;
 * @return {!Array<!proto.EndpointMappingElement>}
 */
proto.EndpointMapping.prototype.getElementsList = function() {
  return /** @type{!Array<!proto.EndpointMappingElement>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.EndpointMappingElement, 1));
};


/** @param {!Array<!proto.EndpointMappingElement>} value */
proto.EndpointMapping.prototype.setElementsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.EndpointMappingElement=} opt_value
 * @param {number=} opt_index
 * @return {!proto.EndpointMappingElement}
 */
proto.EndpointMapping.prototype.addElements = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.EndpointMappingElement, opt_index);
};


proto.EndpointMapping.prototype.clearElementsList = function() {
  this.setElementsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EndpointMappingElement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EndpointMappingElement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EndpointMappingElement.displayName = 'proto.EndpointMappingElement';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EndpointMappingElement.prototype.toObject = function(opt_includeInstance) {
  return proto.EndpointMappingElement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EndpointMappingElement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EndpointMappingElement.toObject = function(includeInstance, msg) {
  var f, obj = {
    serviceid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    endpointname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    endpointid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    from: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EndpointMappingElement}
 */
proto.EndpointMappingElement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EndpointMappingElement;
  return proto.EndpointMappingElement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EndpointMappingElement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EndpointMappingElement}
 */
proto.EndpointMappingElement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setServiceid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndpointname(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEndpointid(value);
      break;
    case 4:
      var value = /** @type {!proto.DetectPoint} */ (reader.readEnum());
      msg.setFrom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EndpointMappingElement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EndpointMappingElement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EndpointMappingElement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EndpointMappingElement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServiceid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getEndpointname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEndpointid();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getFrom();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional int32 serviceId = 1;
 * @return {number}
 */
proto.EndpointMappingElement.prototype.getServiceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.EndpointMappingElement.prototype.setServiceid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string endpointName = 2;
 * @return {string}
 */
proto.EndpointMappingElement.prototype.getEndpointname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.EndpointMappingElement.prototype.setEndpointname = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 endpointId = 3;
 * @return {number}
 */
proto.EndpointMappingElement.prototype.getEndpointid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.EndpointMappingElement.prototype.setEndpointid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional DetectPoint from = 4;
 * @return {!proto.DetectPoint}
 */
proto.EndpointMappingElement.prototype.getFrom = function() {
  return /** @type {!proto.DetectPoint} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.DetectPoint} value */
proto.EndpointMappingElement.prototype.setFrom = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ServiceAndNetworkAddressMappings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ServiceAndNetworkAddressMappings.repeatedFields_, null);
};
goog.inherits(proto.ServiceAndNetworkAddressMappings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ServiceAndNetworkAddressMappings.displayName = 'proto.ServiceAndNetworkAddressMappings';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ServiceAndNetworkAddressMappings.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ServiceAndNetworkAddressMappings.prototype.toObject = function(opt_includeInstance) {
  return proto.ServiceAndNetworkAddressMappings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ServiceAndNetworkAddressMappings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServiceAndNetworkAddressMappings.toObject = function(includeInstance, msg) {
  var f, obj = {
    mappingsList: jspb.Message.toObjectList(msg.getMappingsList(),
    proto.ServiceAndNetworkAddressMapping.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ServiceAndNetworkAddressMappings}
 */
proto.ServiceAndNetworkAddressMappings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ServiceAndNetworkAddressMappings;
  return proto.ServiceAndNetworkAddressMappings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ServiceAndNetworkAddressMappings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ServiceAndNetworkAddressMappings}
 */
proto.ServiceAndNetworkAddressMappings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ServiceAndNetworkAddressMapping;
      reader.readMessage(value,proto.ServiceAndNetworkAddressMapping.deserializeBinaryFromReader);
      msg.addMappings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ServiceAndNetworkAddressMappings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ServiceAndNetworkAddressMappings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ServiceAndNetworkAddressMappings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServiceAndNetworkAddressMappings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMappingsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ServiceAndNetworkAddressMapping.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ServiceAndNetworkAddressMapping mappings = 1;
 * @return {!Array<!proto.ServiceAndNetworkAddressMapping>}
 */
proto.ServiceAndNetworkAddressMappings.prototype.getMappingsList = function() {
  return /** @type{!Array<!proto.ServiceAndNetworkAddressMapping>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ServiceAndNetworkAddressMapping, 1));
};


/** @param {!Array<!proto.ServiceAndNetworkAddressMapping>} value */
proto.ServiceAndNetworkAddressMappings.prototype.setMappingsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ServiceAndNetworkAddressMapping=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ServiceAndNetworkAddressMapping}
 */
proto.ServiceAndNetworkAddressMappings.prototype.addMappings = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ServiceAndNetworkAddressMapping, opt_index);
};


proto.ServiceAndNetworkAddressMappings.prototype.clearMappingsList = function() {
  this.setMappingsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ServiceAndNetworkAddressMapping = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ServiceAndNetworkAddressMapping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ServiceAndNetworkAddressMapping.displayName = 'proto.ServiceAndNetworkAddressMapping';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ServiceAndNetworkAddressMapping.prototype.toObject = function(opt_includeInstance) {
  return proto.ServiceAndNetworkAddressMapping.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ServiceAndNetworkAddressMapping} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServiceAndNetworkAddressMapping.toObject = function(includeInstance, msg) {
  var f, obj = {
    serviceid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    serviceinstanceid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    networkaddress: jspb.Message.getFieldWithDefault(msg, 3, ""),
    networkaddressid: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ServiceAndNetworkAddressMapping}
 */
proto.ServiceAndNetworkAddressMapping.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ServiceAndNetworkAddressMapping;
  return proto.ServiceAndNetworkAddressMapping.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ServiceAndNetworkAddressMapping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ServiceAndNetworkAddressMapping}
 */
proto.ServiceAndNetworkAddressMapping.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setServiceid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setServiceinstanceid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetworkaddress(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNetworkaddressid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ServiceAndNetworkAddressMapping.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ServiceAndNetworkAddressMapping.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ServiceAndNetworkAddressMapping} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServiceAndNetworkAddressMapping.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServiceid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getServiceinstanceid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getNetworkaddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNetworkaddressid();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional int32 serviceId = 1;
 * @return {number}
 */
proto.ServiceAndNetworkAddressMapping.prototype.getServiceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ServiceAndNetworkAddressMapping.prototype.setServiceid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 serviceInstanceId = 2;
 * @return {number}
 */
proto.ServiceAndNetworkAddressMapping.prototype.getServiceinstanceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ServiceAndNetworkAddressMapping.prototype.setServiceinstanceid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string networkAddress = 3;
 * @return {string}
 */
proto.ServiceAndNetworkAddressMapping.prototype.getNetworkaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.ServiceAndNetworkAddressMapping.prototype.setNetworkaddress = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 networkAddressId = 4;
 * @return {number}
 */
proto.ServiceAndNetworkAddressMapping.prototype.getNetworkaddressid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.ServiceAndNetworkAddressMapping.prototype.setNetworkaddressid = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


goog.object.extend(exports, proto);
